◆テスト設計

▽ログイン試行回数制限・アカウントロック:
試行回数制限: 5回連続でログインに失敗した場合。
アカウントロック: 5回連続失敗後、アカウントを5分間ロック。ロック解除後は再度5回まで試行可能。ロックアウトされたユーザーには、その旨と解除時間を示すメッセージを表示。

・テスト条件
5回ログインに失敗し、直後に6回目を試行してログインできないこと
ロックアウト時のメッセージは、理解できる文章になっていること
ロックアウト時のメッセージには、解除時間が5分と記載されていること
4回失敗し、5回目で正しく入力して成功すること
4回失敗し、5回目で正しく入力して成功した後、すぐログアウトして、再度4回失敗し、5回目で正しく入力して成功すること
4回失敗したあと24時間経過してから2回連続で失敗してアカウントロックがかかること
アカウントロックがかかってから4分59秒でログインを試行すると失敗すること
アカウントロックがかかってから5分経過してからログインを試行すると成功すること
ロック解除後、5回ログインに失敗し、直後に6回目を試行してログインできないこと
ロック解除後、4回失敗し、5回目で正しく入力して成功すること
・AI（QAサポート）からの提案
同時に複数の場所からログイン試行があった場合: 同じユーザーアカウントに対して、異なるIPアドレスやブラウザから同時にログイン失敗試行があった場合、カウンターはどのように挙動するか。
パスワードリセット後の挙動: パスワードリセットを行った場合、ログイン失敗回数カウンターはリセットされるか。
アカウントロック中にパスワードリセットを行った場合: ロックが解除されるか、あるいはリセット後もロックが継続するか。
データベースを直接操作した場合の挙動: （QAがタイムスタンプを操作できる前提なので）意図的にDBのログイン失敗回数を操作してテストすることも考えられます。これは、バックエンドの整合性テストに役立ちます。
・AI（開発）のレビュー反映
パスワードリセット（再設定）完了時: パスワードリセットが完了した場合も、セキュリティとユーザビリティの観点からカウンターをリセットすることを推奨します。
//上記を受けて、以下を追加
→パスワードをリセット（再設定）完了後、5回ログインに失敗し、直後に6回目を試行してログインできないこと
→パスワードをリセット（再設定）完了後、4回失敗し、5回目で正しく入力して成功すること


▽パスワード形式に関する要件: 
最小文字数: 8文字 
最大文字数: 255文字 
使用可能な文字種別: 半角英大文字（A-Z）、半角英小文字（a-z）、半角数字（0-9）、記号（!@#$%^&*()_+{}[]:;<>,.?/~`） 
必須要件: 上記のうち3種類以上の文字種を含めること。 

・テスト条件
7文字では登録できないこと
8文字では登録できること
255文字では登録できること
256文字では登録できないこと
半角英大文字Aが使えること
半角英小文字aが使えること
半角数字0が使えること
記号!@#$%^&*()_+{}[]:;<>,.?/~`が使えること
※全部やる時間がない時は<, >などのHTMLタグ関連を優先
半角英大文字Zが使えること
半角英小文字zが使えること
半角数字9が使えること
全角英大文字が使えないこと
全角英小文字が使えないこと
全角数字が使えないこと
全角記号が使えないこと
文字äêó等が使えないこと
漢字、ひらがな、カタカナ等が使えないこと
文字種3種類では登録できること
文字種2種類では登録できないこと
文字種4種類では登録できること
・AI（QAサポート）からの提案
パスワード入力時のフィードバック:
パスワード入力中に、現在入力されている文字数が表示されるか。
パスワード入力中に、必須文字種別が満たされているかどうかのヒント（例：「記号を含めてください」）が表示されるか。
パスワードの強度を示すインジケーター（弱い、普通、強いなど）が表示されるか。 (これは要件定義にはないですが、ユーザビリティ向上の観点から提案することもできます)
エラーメッセージの確認:
各不正なパスワード入力（短すぎる、長すぎる、文字種が足りない、不正な文字が含まれる）に対して、具体的で分かりやすいエラーメッセージが表示されること。
パスワードの表示/非表示（アスタリスク表示など）:
パスワード入力フィールドが通常アスタリスクなどで非表示になること。
必要であれば、パスワードを一時的に表示する機能があるか（例：目のアイコン）。
コピー＆ペーストの挙動:
長すぎるパスワードをコピー＆ペーストした場合、255文字で切り捨てられるか、それともエラーになるか。
パスワード変更時の挙動: (ユーザー登録だけでなく)
現在のパスワードと新しいパスワードの形式が適切か。
新しいパスワードと現在のパスワードが同じでないか（セキュリティ上の配慮）。
パスワード変更後、旧パスワードでログインできないこと。


▽商品説明に関する要件:
文字数制限: 最大1000文字、最小は任意（空欄許可）。
特殊文字の扱い: 絵文字を除くすべての特殊文字を許可。表示時にHTMLエスケープ処理を適切に行い、XSS脆弱性対策を講じる。

・テスト条件
商品説明に関する要件は、
空欄で登録できること
1文字で登録できること
1000文字で登録できること
1001文字で登録できないこと
絵文字が登録できないこと
絵文字以外の全ての特殊文字が登録できること
<script>alert('注意！！')</script>等を登録しても何も起きないこと
・AI（QAサポート）からの提案
HTMLタグの扱い: <br>, <b>, <img>などのHTMLタグを記述した場合に、それらが適切に表示されるか、あるいはエスケープされて表示されるか（システムの仕様による）。XSS対策と関連しますが、意図的に装飾目的でHTMLを許可する場合と、完全にテキストとして扱う場合で挙動が変わります。現在の要件からは「表示時にHTMLエスケープ処理を適切に行う」とあるので、タグがそのまま表示される（実行されない）ことを期待します。
文字コードの問題: 特定の文字コードの文字（例えば、多言語文字の一部）が正しく登録・表示されるか。


▽商品一覧表示に関する要件:
1ページあたりの表示数: 10件。
総表示数: 数百件までを想定し、ページネーション機能により対応。
同名商品の扱い: 商品名はユニークではないため、同名の商品を複数登録し、それぞれを別の商品としてIDで識別。

・テスト条件
商品一覧表示に関する要件:
商品未登録の時に適切なメッセージが表示されるか
登録商品が1つしかない時に表示崩れなどがないこと
登録商品が10個の時に表示崩れなどがないこと
登録商品が11個の時に表示崩れなどがないこと
登録商品が999個の時に表示崩れなどがないこと
登録商品が10個の時にページネーション機能でページ遷移できないこと
登録商品が11個の時にページネーション機能でページ遷移できること
同名商品の価格などが混同していないこと
同名商品の識別が、ユーザーにも容易であること

・AI（QAサポート）からの提案
　商品説明に関する要件:
HTMLタグの扱い: <br>, <b>, <img>などのHTMLタグを記述した場合に、それらが適切に表示されるか、あるいはエスケープされて表示されるか（システムの仕様による）。XSS対策と関連しますが、意図的に装飾目的でHTMLを許可する場合と、完全にテキストとして扱う場合で挙動が変わります。現在の要件からは「表示時にHTMLエスケープ処理を適切に行う」とあるので、タグがそのまま表示される（実行されない）ことを期待します。
文字コードの問題: 特定の文字コードの文字（例えば、多言語文字の一部）が正しく登録・表示されるか。

　商品一覧表示に関する要件:
ページネーションの各機能:
最初のページ、最後のページへの直接遷移。
前のページ、次のページへの遷移。
特定のページ番号への遷移（もしあれば）。
ページネーションのリンクが、アクティブなページで無効になっているか。
ソート機能やフィルタリング機能: (要件定義書には明記されていませんが、一般的なECサイト機能として存在しうるため、今後の拡張性やユーザビリティの観点から考慮・提案しても良いかもしれません)
価格順、新着順、人気順などで商品を並べ替えられるか。
カテゴリや価格帯で商品を絞り込めるか。
商品詳細ページへの遷移:
各商品から、対応する商品詳細ページへ正しく遷移できること。


▽「3.3. 購入機能」 の 「カートに関する要件」
最大商品数: 20種類。
保存期間: ユーザーがログアウトしても、セッション情報に基づいて7日間カート内容を保持。それ以降はクリア。計測はデータベースのタイムスタンプ（最終更新日時）を基準に行う。テスト時はタイムスタンプを直接操作することで疑似的に経過時間を再現可能。

・テスト条件
カートが空の場合に表示崩れなどがないこと
カートが空の場合に適切なメッセージが表示されること
商品1つの場合に表示崩れなどがないこと
商品20個の場合に表示崩れなどがないこと
21個目の商品を投入しようとするとエラーメッセージが出て投入出来ないこと
カートに投入した商品を購入するとカートの中が空になること
カート内商品をユーザーの意思で削除できること
カート内に複数商品がある場合に、一覧の一番上の商品を削除しても表示崩れなどがないこと
タイムスタンプ操作で、擬似的にログアウト後6日と23時間59分経過時にはカートの中身が残っていること
タイムスタンプ操作で、擬似的にログアウト後7日経過時にはカートの中身が消えていること
（最終更新日時について、ログイン、ログアウトだけで更新されるのか、カートに商品を投入、または削除等が必要か、開発AIに要確認）
想定したタイミングで最終更新日時が更新されること

・AI（QAサポート）からの提案
同一商品を複数回カートに追加した場合の挙動: 新しい行として追加されるのか、既存行の数量が増えるのか。要件定義書に「20種類まで」とあるため、数量ではなく種類でカウントすると思われますが、念のため確認しておくと良いでしょう。
在庫がない商品をカートに追加した場合: エラーになるか、あるいはカートには入るが購入時にエラーになるか。
価格変更された商品をカートに入れたままにした場合: カート内の商品の価格が自動的に更新されるか、それとも古い価格のままになるか。
非ログインユーザーでカートに追加した場合の挙動: （簡易的なカートの場合）ログイン時にカート内容が引き継がれるか、あるいはクリアされるか。要件定義書では「ログイン済みユーザーは商品をカートに追加できる」とあるので、非ログインユーザーは追加できない前提かもしれませんが、念のため。

・AI（開発）のレビュー
エラーメッセージの表示:
UI上、カートへの追加ボタンを押した際に、「カートに追加できる商品の種類は20個までです。」 のような明確なエラーメッセージを、商品追加に失敗したことを示す視覚的なフィードバック（例：ポップアップ、アラート、またはボタン横のテキスト表示）とともに表示します。
サーバーサイドのAPIからは、適切なHTTPステータスコード（例：400 Bad Request または 403 Forbidden）と、エラーの詳細を示すJSONレスポンスを返します。
商品追加の拒否:
21個目の商品はカートに追加されないようにします。既存の20個の商品はカートに残ったままです。
上記を受けて以下を追加


▽「購入処理タイムアウトに関する要件」、
API応答タイムアウト: 10秒。
データベーストランザクションタイムアウト: 30秒。

・テスト条件
（ツール未導入のため曖昧）
API応答が9秒の場合、正常に進行すること
API応答が10秒の場合、連携処理を停止すること
API応答が10秒の場合、タイムアウトによるエラーメッセージを表示すること
データベーストランザクションが29秒で完了した場合、タイムアウトしないこと
データベーストランザクションが30秒経過しても完了しない場合、タイムアウトすること
データベーストランザクションタイムアウトをした際、データの整合性が取れていること

・AI（QAサポート）からの提案
ユーザーへの適切なフィードバック: タイムアウト時に、ユーザーが次に取るべき行動（「ネットワーク接続を確認してください」「時間をおいて再試行してください」など）が示されているか。
サーバーサイドログの確認: タイムアウト発生時に、サーバーログに適切なエラー情報が記録されているか。
高負荷時のタイムアウト挙動: 複数ユーザーが同時に購入処理を行った場合に、タイムアウトが想定通りに発生するか。


▽「3.4. マイページ機能」の「購入履歴表示に関する要件」
1ページあたりの表示件数: 5件。
表示順序: 購入日時が新しい順（降順）。
総表示件数: 数百件までを想定し、ページネーション機能により対応。

・テスト条件
商品未購入の場合、表示崩れなどがないこと
商品1つ購入済みの場合、表示崩れなどがないこと
商品5つ購入済みの場合、表示崩れなどがないこと
商品6つ購入済みの場合、表示崩れなどがないこと
商品999個購入済みの場合、表示崩れなどがないこと
商品5つ購入済みの場合、ページネーションか機能しないこと
商品6つ購入済みの場合、ページネーションが機能すること
商品999個購入済みの場合、ページネーションの数字に遷移できること

・AI（QAサポート）からの提案
　ページネーションの各機能:
最初のページ、最後のページへの直接遷移。
前のページ、次のページへの遷移。
特定のページ番号への遷移（もしあれば）。
ページネーションのリンクが、アクティブなページで無効になっているか。
表示順序の確認:
「購入日時が新しい順（降順）」という要件通りに表示されること。
複数購入した場合、同一日時でも正しく表示されるか。
詳細情報への遷移:
各購入履歴から、購入した商品の詳細情報や注文詳細ページへ正しく遷移できること。


