ECサイト機能要件定義書 (バージョン 1.1)
1. はじめに
本ドキュメントは、既存のユーザー管理システムを拡張し、ECサイトとしての機能を追加するための要件を定義するものである。開発素人がAIの支援を受けながら開発を進め、その過程でQAスキルを磨き、GitHub上でその成果を公開することを目的とする。
2. 対象システム
Spring Boot (Java), MySQL, HTML/CSS/JavaScript を用いたWebアプリケーション。
3. 機能要件
3.1. 商品管理機能 (商品エンティティ)
•	商品登録・参照:
o	商品名、商品説明、価格、商品種別（単発買い切り型/継続課金型）を登録できる。
o	商品一覧を閲覧できる（未ログインユーザーも可能）。
o	個別の商品詳細を閲覧できる（未ログインユーザーも可能）。
•	商品種別の詳細:
o	単発買い切り型: 一度購入すれば、それ以降の支払いは発生しない。
o	継続課金型: 定期的に料金が発生する。
•	価格に関する要件:
o	データ型: DECIMAL(10, 2) を想定。
o	有効な範囲: 最小値 0.01円、最大値 999,999,999.99円。
•	商品説明に関する要件:
o	文字数制限: 最大1000文字、最小は任意（空欄許可）。
o	特殊文字の扱い: 絵文字を除くすべての特殊文字を許可。表示時に適切なHTMLエスケープ処理を実施し、XSS対策を講じる。
•	商品一覧表示に関する要件:
o	1ページあたりの表示数: 10件。
o	総表示数: 数百件までを想定し、ページネーション機能により対応。
•	同名商品の扱い: 商品名はユニークではないため、同名の商品を複数登録し、それぞれを別の商品として扱う。内部的にはIDで識別。
3.2. ユーザー認証・認可機能
•	ユーザー登録:
o	既存のユーザー管理システムと連携し、ECサイト利用のためのユーザー登録を可能にする。
•	ログイン・ログアウト:
o	登録済みユーザーはログインし、購入機能やマイページ機能にアクセスできる。
•	アクセス制限:
o	購入機能、マイページ機能はログインユーザーのみ利用可能とする。
o	商品一覧、商品詳細は未ログインユーザーも閲覧可能とする。
•	パスワード形式に関する要件:
o	最小文字数: 8文字、最大文字数: 255文字。
o	使用可能な文字種別: 半角英大文字（A-Z）、半角英小文字（a-z）、半角数字（0-9）、記号（!@#$%^&*()_+{}[]:;<>,.?/~`）。
o	必須要件: 上記のうち3種類以上の文字種を含めること。
•	ログイン試行回数制限・アカウントロック:
o	試行回数制限: 5回連続でログインに失敗した場合。
o	アカウントロック: 5回連続失敗後、アカウントを5分間ロック。ロック解除後は再度5回まで試行可能。ロックアウトされたユーザーには、その旨と解除時間を示すメッセージを表示。
•	同名ユーザーの扱い: メールアドレスをユニークキーとするため、同名であっても異なるメールアドレスであれば別ユーザーとして扱う。
3.3. 購入機能
•	商品選択・カート:
o	ログイン済みユーザーは商品をカートに追加できる（簡易的なカート機能、または直接購入でも可）。
•	購入処理:
o	選択した商品の購入を確定できる。
o	購入完了後、購入履歴に記録される。
o	今回は外部決済システムとの連携は行わず、内部的に「購入完了」とする。
•	継続課金型商品の購入:
o	継続課金型商品を購入した場合、定期課金が開始される状態とする。
•	カートに関する要件:
o	最大商品数: 20種類。
o	保存期間: ユーザーがログアウトしても、セッション情報に基づいて7日間カート内容を保持。それ以降はクリア。計測はデータベースのタイムスタンプ（最終更新日時）を基準に行う。テスト時はタイムスタンプを直接操作することで疑似的に経過時間を再現可能。
•	購入処理タイムアウトに関する要件:
o	API応答タイムアウト: 10秒。
o	データベーストランザクションタイムアウト: 30秒。
3.4. マイページ機能
•	購入履歴表示:
o	ログイン済みユーザーは自分の購入履歴を一覧で確認できる。
o	単発買い切り型商品と継続課金型商品の両方を表示できる。
•	継続課金停止機能:
o	継続課金型商品を購入しているユーザーは、マイページからその課金を停止できる。
o	停止した場合、それ以降の料金は発生しないものとする。
•	購入履歴表示に関する要件:
o	1ページあたりの表示件数: 5件。
o	表示順序: 購入日時が新しい順（降順）。
o	総表示件数: 数百件までを想定し、ページネーション機能により対応。
3.5. 管理機能（今回はスコープ外）
•	商品登録・編集・削除機能については、今回は手動でのデータベース操作や、簡易的な管理者向け画面作成も検討するが、主要なスコープ外とする。
4. 非機能要件
•	ユーザビリティ:
o	視覚的整合性: デザインガイドライン（未策定だが、シンプルな統一感を意識）に沿っているか。
o	入力補助: 必須項目表示、入力フィールドのプレースホルダー、入力形式のガイドメッセージ、エラー時の適切なフィードバック。
o	ナビゲーション: 各ページへの遷移が直感的であるか、パンくずリスト（必要であれば）の有無、戻るボタンの適切性。
o	応答性: クリックや入力に対するUIの即時応答。
o	エラーメッセージ: エラー内容が具体的に分かり、ユーザーが次に取るべき行動が示されているか。
•	パフォーマンス要件（応答速度）:
o	主要なAPI応答時間: 200ms以内（正常系、データベースからのデータ取得を含む）。
o	ページ表示速度: 1秒以内（主要な画面、初回アクセス時を除く）。
•	セキュリティ要件:
o	認証: Spring Securityを利用したパスワードのハッシュ化（Bcryptなど）、セッション管理。
o	認可: ロールベースアクセス制御（管理者/一般ユーザーなど、今後の拡張で考慮）。
o	入力値検証 (Validation): サーバーサイドでの入力値の厳密なバリデーション（必須、形式、範囲、文字種など）。
o	SQLインジェクション対策: JPA/Hibernateが提供するプリペアドステートメントの利用。
o	XSS対策: 表示データの適切なエスケープ処理。
o	エラーメッセージ: 詳細なエラー情報をユーザーに返さない（一般的なエラーメッセージを表示）。
o	HTTPS: デプロイ時にはHTTPSを必須とする（開発環境ではHTTPで検証）。
•	データ整合性:
o	購入処理におけるデータの二重登録や欠損がないこと。
o	継続課金停止時のデータ状態の正確性。
•	エラーハンドリング:
o	予期せぬエラー発生時の適切なメッセージ表示と、サーバーサイドでのログ記録。
o	ユーザー操作に対するエラー処理:
	入力バリデーションエラー: 入力フォームの近くに具体的なエラーメッセージを表示。
	サーバーサイドエラー: 汎用的なエラーページ表示とともに、サーバーログに詳細を記録。
	存在しないリソースへのアクセス: 404 Not Found ページ。
	認証・認可エラー: 適切なステータスコード（401 Unauthorized, 403 Forbidden）とメッセージを返す。
5. 想定しているリスク
•	開発・学習に関するリスク:
o	ECサイト機能（特に決済や継続課金）の実装が複雑で、学習に時間がかかる可能性がある。
o	Spring Securityの導入が、開発素人にとって初期のハードルになる可能性がある。
•	品質に関するリスク:
o	複雑な業務ロジック（特に継続課金の状態遷移）において、考慮漏れによるバグが発生する可能性。
o	Webアプリケーション開発の基本的なセキュリティ知識不足による脆弱性の混入。
•	環境に関するリスク:
o	MySQLとアプリケーション間の接続問題や、環境差異による問題。

