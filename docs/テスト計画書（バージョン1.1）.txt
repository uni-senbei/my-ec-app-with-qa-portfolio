テスト計画書（バージョン1.0）
1.1. 目的 (Purpose)
本テスト計画書の目的は、ECサイト構築プロジェクトにおけるテスト活動の全体像を定義することにある。具体的には、テストのスコープ、アプローチ、必要なリソース、スケジュール、および品質目標を明確にし、関連するステークホルダー間で共通認識を醸成する。
このテスト活動を通じて、JSTQB Advanced Level テストマネージャ（ALTM）シラバスの概念を実践的に適用し、特にテスト設計以前の上流工程における品質保証活動の経験を深めることを目指す。

1.2. 範囲 (Scope)
・商品管理機能
・ユーザー認証・認可機能
・購入機能
・マイページ機能

・管理機能（今回はスコープ外）


1.3. 参照文書 (References)
ECサイト機能要件定義書 (バージョン 1.1)

2. テストの対象とアプローチ
2.1. テスト対象 (Items to be Tested)
・商品管理機能
　商品登録・参照、商品種別の詳細、価格に関する要件、商品説明に関する要件、商品一覧表示に関する要件、同名商品の扱い
・ユーザー認証・認可機能
　ユーザー登録、ログイン・ログアウト、アクセス制限、パスワード形式に関する要件、ログイン試行回数制限・アカウントロック、同名ユーザーの扱い
・購入機能
　商品選択・カート、購入処理、継続課金型商品の購入、カートに関する要件、購入処理タイムアウトに関する要件
・マイページ機能
　購入履歴表示、継続課金停止機能、購入履歴表示に関する要件

2.2. テストしない項目 (Items Not to be Tested)
・管理機能（今回はスコープ外）

2.3. テストアプローチ (Test Approach)
単体：開発者（AI）が単体テストを実装し、QAはそのテストコードの品質（カバレッジ、可読性、網羅性）をレビューする
結合：QA側で、モジュール間のインターフェース、データベースとの連携、APIの正常系・異常系をテストなおAPIテストにはツールを導入して自動化予定
システム：QAが性能、セキュリティ、ユーザビリティ、エラーハンドリングの機能要件・非機能要件を網羅的にテストする
リグレッションテストは自動化する
受け入れ：主要なユースケースシナリオをテストする
主要な遷移パスは自動化されたテストケースで網羅する
特に継続課金は探索的テストで慎重に確認する

3. テストリソースとスケジュール
3.1. 人員と役割 (Staffing and Responsibilities):
テストマネージャー（私）：品質管理、テスト戦略・計画の策定、進捗管理、リスク管理、開発者（AI）との連携、テストプロセスの改善
開発者（AI）：サイトの設計、実装、修正、単体テスト（TDD含む）の実施
テスター（私）：テスト設計（結合・システム・受け入れ）、テスト実行、欠陥報告、テスト結果の分析

3.2. 環境 (Environment Needs):
開発環境とテスト環境: 本プロジェクトでは、開発環境とテスト環境を同一のローカル環境とし、データベースもローカルMySQLを利用する。
本番環境: 本番環境へのデプロイは、現状ではスコープ外とする。
テストデータ: テストデータは、手動作成とスクリプトによる生成を併用する。特に、カートの保存期間テストのように、時間の操作が必要なテストではデータベースのタイムスタンプを直接操作して疑似的に経過時間を再現するアプローチを採用する。

3.3. スケジュール (Schedule):
全体想定期間: 約1週間
要件レビュー：初日 (完了済)
テスト計画：2日目 (現在進行中)
実装、テスト設計：3〜4日目
テスト実行、修正：5〜6日目
テスト完了：7日目

3.4. ツール (Tools):
既存ツール:
IntelliJ IDEA (開発IDE)
Selenium WebDriver (UI自動テスト)
MySQL Workbench (データベース管理)
欠陥管理ツール:  GitHub Issues
APIテストツール: REST Assured

検討中のツール:
テストケース管理ツール: 未定（まずはExcelなどで代替し、必要に応じて検討）
CI/CDツール: GitHub Actions (GitHubへの公開とテスト自動化の連携)

4. 品質とリスク
4.1. テスト完了基準 (Completion Criteria): 
・全ての「Must Fix」バグの修正が確認できた、または容認された。
・主要な機能のテストケースが全て実行され、かつ合格した。 (例: ログイン、商品閲覧、カート追加、購入、マイページ、継続課金開始・停止など)
・重大な非機能要件（性能、セキュリティ、ユーザビリティ）が、要件定義書（バージョン1.1）で定義された目標値を満たしている。 (例: API応答時間200ms以内、ページ表示速度1秒以内、基本的なセキュリティ対策の実装確認など)
・想定外の事情により開発が続行できなくなった場合。

4.2. テスト中断・再開基準 (Suspension and Resumption Criteria): 
停止条件:
・テスト対象がテストに耐えられないほど不安定な状態である場合（例：主要な機能で繰り返しのクラッシュやフリーズが発生し、テストが先に進めない）。
・テスト環境が利用できない、または著しく不安定な状態にある場合。
・テストスピードが開発、修正スピードを大幅に上回り、テスト対象となる機能の準備が著しく遅延していると判断された時。
・（重要度の高い）未修正の欠陥が、他のテスト活動を著しく阻害していると判断された時。

再開条件:
・上記停止条件の原因が解消され、テストを再開できる状態になったと判断された時。
・テストスピードと開発・修正スピードのバランスが改善し、テストが効果的に実施できる見込みが立った時。

4.3. リスクと対応 (Risks and Contingencies): 前回AI開発が挙げたリスク（特に品質に関するリスク）に対して、テストとしてどのように対応するかを記述します。

品質に関するリスク:
複雑な業務ロジック（特に継続課金の状態遷移）において、考慮漏れによるバグが発生する可能性。
Webアプリケーション開発の基本的なセキュリティ知識不足による脆弱性の混入。

対策：
継続課金ロジックの複雑性への対応:
・ユースケースシナリオを多数用意し、網羅的な機能テストを実施する。
・特に状態遷移テスト技法を適用し、継続課金の各状態（購入、継続中、停止、再開など）とその遷移パスを詳細に検証する。
・探索的テストを重点的に行うことで、事前に想定しにくい欠陥や、利用者の誤操作による問題を発見する。
・開発者（AI）と密に連携し、設計レビューの段階から継続課金ロジックの妥当性を確認する。
セキュリティ脆弱性への対応:
・OWASP Top 10など一般的なWebアプリケーションのセキュリティ脆弱性リストを参考に、セキュリティテストケースを設計・実行する。
・特に、入力値検証（バリデーション）、認証・認可機能、セッション管理、およびXSS/SQLインジェクション対策が正しく実装されているかを重点的に確認する。
・可能であれば、簡易的な脆弱性スキャンツールの利用も検討する。



更新履歴
バージョン1.1
2.3. テストアプローチ (Test Approach)
単体

3.4. ツール (Tools)
欠陥管理ツール
APIテストツール
