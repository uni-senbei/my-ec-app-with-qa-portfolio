開発タスクリスト
今後のタスク
残りの基本的なCRUD APIの実装とテスト

[ ] PUT /api/products/{id} の実装とテスト: 特定の商品情報を更新するAPIをProductControllerに追加し、Postman等で動作確認を行います。

[ ] DELETE /api/products/{id} の実装とテスト: 特定の商品を削除するAPIをProductControllerに追加し、Postman等で動作確認を行います。

エラーハンドリングの強化

[ ] 無効な入力データに対するハンドリング: 不正なデータ（例: nameが空、priceが負の数）に対して、適切なHTTPステータスコード（例: 400 Bad Request）とユーザーに分かりやすいエラーメッセージを返すようにします。Springの @Valid アノテーションや Validation APIの導入を検討します。

[ ] リソースが見つからない場合（404 Not Found）の標準化: GET /api/products/{id} などでリソースが見つからない場合に、統一的なエラーメッセージを含むレスポンスボディを返すように改善します。

主要機能の実装

ログイン・ユーザー管理機能:

[ ] ユーザー登録API (/api/users/register) のエラー調査と修正: "500 Internal Server Error" や "401 Unauthorized" のエラーの原因を特定し、セキュリティ設定（SecurityConfig.javaなど）、ユーザー認証（UserServiceやUserRepository）、ユーザー登録（AuthControllerなど）のコードを確認・修正します。

[ ] ユーザー認証（ログイン、ログアウト）の実装

[ ] 

ログイン試行回数制限とアカウントロックのロジック実装: ログイン試行回数カウンターのリセットロジック（正常ログイン時、アカウントロック解除時、パスワードリセット完了時）を考慮して実装します 。

[ ] パスワードリセット機能の実装

カート機能:

[ ] CartServiceでのビジネスロジック実装: 現在のCartService.javaの内容を確認し、具体的なカートへの商品追加、数量変更、削除、カート内容の表示などのビジネスロジックを実装します。

[ ] 

カートの最大商品数オーバー時の振る舞い実装: カートに21個目の商品を追加しようとした際、商品が追加されず、「カートに追加できる商品の種類は20個までです。」といったエラーメッセージと適切なHTTPステータスコード（例: 400 Bad Request または 403 Forbidden）を返すように実装します 。

[ ] 

カートの「最終更新日時」更新トリガーの実装: カートへの商品追加、カートからの商品削除、カート内の商品数量変更、ユーザーログイン時に「最終更新日時」が更新されるように実装します 。

[ ] 注文・購入処理機能: 購入処理のタイムアウト要件などを考慮して実装します。

テスト環境の整備と自動テストの導入

[ ] REST Assuredの導入と自動APIテストの記述: REST Assuredをプロジェクトに追加し、自動APIテストを記述し始めます（まずはGETとPOSTのテストから）。

完了したタスク
[x] java.lang.StackOverflowErrorの解消: http://localhost:8080/api/cart/add POSTリクエスト時に発生していた無限再帰エラーを、JSONシリアライズの循環参照対策（@JsonManagedReference / @JsonBackReference）とLombokの@EqualsAndHashCode(of = "id")最適化により解決。（2025-06-26完了）