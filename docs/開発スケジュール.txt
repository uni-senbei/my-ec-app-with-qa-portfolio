
これまでに完了したこと

1.プロジェクトの初期設定:
Spring Bootプロジェクトの作成。
MySQLデータベースとの接続設定。
Lombokなど必要な依存関係の追加。

2.データベーススキーマとエンティティの定義:
products テーブルの作成（id, name, description, price, type）。
Spring Data JPA を使用した Product エンティティの定義。
ProductType enum の定義と分離。
ProductRepository インターフェースの作成。

3.基本的なRESTful APIの実装（ProductController）:
GET /api/products: 全ての商品一覧を取得するAPI。
GET /api/products/{id}: 特定の商品詳細を取得するAPI。
POST /api/products: 新しい商品を追加するAPI。

4.開発環境のトラブルシューティング:
MySQL接続問題の解決。
IntelliJ IDEAのコンパイルエラー（jakarta.persistence does not exist、';'がありません、パッケージ...は存在しません）の解決。
ProductType enum のネスト問題の解決。

5.APIの動作確認:
MySQL Workbenchから手動でデータ挿入。
PostmanおよびブラウザからのGETリクエストでのデータ取得確認。
PostmanからのPOSTリクエストでの新規データ登録確認。
バージョン管理:

GitHubへのコミットとプッシュの実行。

-----------------------------------

これからやるべきこと
以下に、今後の開発タスクをリストアップします。優先順位は一般的なAPI開発の進め方に基づいています。

1. 残りの基本的なCRUD APIの実装とテスト
PUT /api/products/{id} の実装とテスト:

特定の商品情報を更新するAPIを ProductController に追加します。
Postmanで既存の商品IDと更新データを送信し、更新が正しく行われることを確認します。
ブラウザまたはGETリクエストで、更新内容が反映されていることを確認します。
DELETE /api/products/{id} の実装とテスト:

特定の商品を削除するAPIを ProductController に追加します。
Postmanで既存の商品IDに対してDELETEリクエストを送信し、削除が正しく行われることを確認します。
GETリクエストで、削除された商品がリストから消えていることを確認します。

2. エラーハンドリングの強化
無効な入力データに対するハンドリング:

例えば、POST や PUT でnameが空、priceが負の数など、不正なデータが送られてきた場合に、適切なHTTPステータスコード（例: 400 Bad Request）と、ユーザーに分かりやすいエラーメッセージを返すようにします。Springの @Valid アノテーションや Validation APIの導入を検討します。
リソースが見つからない場合（404 Not Found）の標準化:

現在も GET /api/products/{id} で404を返していますが、レスポンスボディも統一的なエラーメッセージになるように改善します。

3. その他の機能要件の検討と実装（「テスト設計（バージョン1.0）.txt」と「要件追加・変更リスト.txt」を参照）
これらは、今回実装した商品管理APIとは直接関係ない可能性もありますが、今後の主要な機能になります。

ログイン・ユーザー管理機能:

ユーザー認証（ログイン、ログアウト）。
ログイン試行回数制限とアカウントロック（要件追加・変更リストの「ログイン試行回数カウンターのリセットロジック」を参照）。
パスワードリセット機能。
カート機能:

商品をカートに追加、カート内容の表示、カートからの削除。
カートの最大商品数制限（要件追加・変更リストの「カートの最大商品数オーバー時」を参照）。
注文・購入処理機能:

購入処理のタイムアウト要件（テスト設計書を参照）。

4. テスト環境の整備と自動テストの導入
REST Assuredの導入:
「テスト計画書」で言及されている REST Assured をプロジェクトに追加し、自動APIテストを記述し始めます。まずは、GETとPOSTのテストから始めると良いでしょう。
これにより、手動でのPostman確認だけでなく、コードベースでテストが自動実行できるようになります。

